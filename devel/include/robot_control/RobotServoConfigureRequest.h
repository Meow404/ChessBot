// Generated by gencpp from file robot_control/RobotServoConfigureRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MESSAGE_ROBOTSERVOCONFIGUREREQUEST_H
#define ROBOT_CONTROL_MESSAGE_ROBOTSERVOCONFIGUREREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_control
{
template <class ContainerAllocator>
struct RobotServoConfigureRequest_
{
  typedef RobotServoConfigureRequest_<ContainerAllocator> Type;

  RobotServoConfigureRequest_()
    : base_angle(0)
    , right_angle(0)
    , left_angle(0)  {
    }
  RobotServoConfigureRequest_(const ContainerAllocator& _alloc)
    : base_angle(0)
    , right_angle(0)
    , left_angle(0)  {
  (void)_alloc;
    }



   typedef int16_t _base_angle_type;
  _base_angle_type base_angle;

   typedef int16_t _right_angle_type;
  _right_angle_type right_angle;

   typedef int16_t _left_angle_type;
  _left_angle_type left_angle;





  typedef boost::shared_ptr< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RobotServoConfigureRequest_

typedef ::robot_control::RobotServoConfigureRequest_<std::allocator<void> > RobotServoConfigureRequest;

typedef boost::shared_ptr< ::robot_control::RobotServoConfigureRequest > RobotServoConfigureRequestPtr;
typedef boost::shared_ptr< ::robot_control::RobotServoConfigureRequest const> RobotServoConfigureRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control::RobotServoConfigureRequest_<ContainerAllocator1> & lhs, const ::robot_control::RobotServoConfigureRequest_<ContainerAllocator2> & rhs)
{
  return lhs.base_angle == rhs.base_angle &&
    lhs.right_angle == rhs.right_angle &&
    lhs.left_angle == rhs.left_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control::RobotServoConfigureRequest_<ContainerAllocator1> & lhs, const ::robot_control::RobotServoConfigureRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "880df4b47385a27ec3b8d61f0e69b38c";
  }

  static const char* value(const ::robot_control::RobotServoConfigureRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x880df4b47385a27eULL;
  static const uint64_t static_value2 = 0xc3b8d61f0e69b38cULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control/RobotServoConfigureRequest";
  }

  static const char* value(const ::robot_control::RobotServoConfigureRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 base_angle\n"
"int16 right_angle\n"
"int16 left_angle\n"
;
  }

  static const char* value(const ::robot_control::RobotServoConfigureRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.base_angle);
      stream.next(m.right_angle);
      stream.next(m.left_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotServoConfigureRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control::RobotServoConfigureRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control::RobotServoConfigureRequest_<ContainerAllocator>& v)
  {
    s << indent << "base_angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.base_angle);
    s << indent << "right_angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_angle);
    s << indent << "left_angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MESSAGE_ROBOTSERVOCONFIGUREREQUEST_H
