// Generated by gencpp from file arduino_control/servo.msg
// DO NOT EDIT!


#ifndef ARDUINO_CONTROL_MESSAGE_SERVO_H
#define ARDUINO_CONTROL_MESSAGE_SERVO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arduino_control
{
template <class ContainerAllocator>
struct servo_
{
  typedef servo_<ContainerAllocator> Type;

  servo_()
    : motor_id(0)
    , angle(0)  {
    }
  servo_(const ContainerAllocator& _alloc)
    : motor_id(0)
    , angle(0)  {
  (void)_alloc;
    }



   typedef uint8_t _motor_id_type;
  _motor_id_type motor_id;

   typedef int16_t _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::arduino_control::servo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arduino_control::servo_<ContainerAllocator> const> ConstPtr;

}; // struct servo_

typedef ::arduino_control::servo_<std::allocator<void> > servo;

typedef boost::shared_ptr< ::arduino_control::servo > servoPtr;
typedef boost::shared_ptr< ::arduino_control::servo const> servoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arduino_control::servo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arduino_control::servo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arduino_control::servo_<ContainerAllocator1> & lhs, const ::arduino_control::servo_<ContainerAllocator2> & rhs)
{
  return lhs.motor_id == rhs.motor_id &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arduino_control::servo_<ContainerAllocator1> & lhs, const ::arduino_control::servo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arduino_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arduino_control::servo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arduino_control::servo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduino_control::servo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduino_control::servo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino_control::servo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino_control::servo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arduino_control::servo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2a803e220d5afb4a14a1d355efb3faf";
  }

  static const char* value(const ::arduino_control::servo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2a803e220d5afb4ULL;
  static const uint64_t static_value2 = 0xa14a1d355efb3fafULL;
};

template<class ContainerAllocator>
struct DataType< ::arduino_control::servo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arduino_control/servo";
  }

  static const char* value(const ::arduino_control::servo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arduino_control::servo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 motor_id\n"
"int16 angle\n"
;
  }

  static const char* value(const ::arduino_control::servo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arduino_control::servo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_id);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arduino_control::servo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arduino_control::servo_<ContainerAllocator>& v)
  {
    s << indent << "motor_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_id);
    s << indent << "angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDUINO_CONTROL_MESSAGE_SERVO_H
